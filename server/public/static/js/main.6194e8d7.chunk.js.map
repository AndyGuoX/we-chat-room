{"version":3,"sources":["common/constant.ts","App/store/GlobalStore.tsx","App/utils/operatorLocalStorage.ts","App/utils/loadable.tsx","App/router/index.ts","App/layout/Chat/WeChatHeader/index.tsx","App/components/MyBadge/index.tsx","App/httpClientRequest/http.ts","App/layout/Chat/SideUserList/components/UserItem/index.tsx","App/httpClientRequest/useApi.ts","App/layout/Chat/SideUserList/index.tsx","App/utils/index.ts","App/layout/Chat/ChatMain/index.tsx","App/layout/Login/index.tsx","App/layout/Register/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx","App/layout/Chat/ChatStore/ChatStore.tsx"],"names":["siteName","apiIp","sideWidth","state","token","getToken","userInfo","userId","nickname","avatar","allUserList","createStore","user","socket","io","logout","removeToken","this","storeContext","React","createContext","StoreProvider","children","store","useLocalStore","Provider","value","useGlobalStore","useContext","Error","localStorage","getItem","setToken","setItem","removeItem","LoadingComponent","props","NProgress","start","done","Component","routes","path","exact","auth","component","loader","loading","Loadable","loadable","WeChatHeader","globalStore","router","useHistory","className","src","alt","onClick","a","push","success","MyBadge","axios","create","timeout","defaults","headers","post","httpCode","400","401","403","404","500","501","502","504","useRequest","url","config","useState","setLoading","request","useCallback","params","pathParams","requestUrl","authorization","method","response","data","tips","status","message","error","Promise","reject","UserItem","observer","chatStore","useChatStore","getAllRoomRecords","getPrivateRecords","chatTo","chat","includes","emit","unreadMessage","currentRecords","allRoomRecords","item","privateRecords","isOnline","latestMessage","time","SideUserList","useEffect","map","key","generateUUID","d","Date","getTime","replace","c","r","Math","random","floor","toString","Sider","Content","ChatMain","getUserInfo","getAllUser","on","chatRoom","_id","fromId","toId","forEach","groupItem","latestMessageNickname","userAgent","navigator","isOpera","indexOf","isIE","isIE11","isEdge","_beforeUnload_time","window","onunload","onbeforeunload","width","style","marginLeft","backgroundColor","display","height","render","Login","loginRequest","loginSubmit","values","password","md5","res","resData","code","onFinish","Item","name","rules","required","autoComplete","placeholder","validator","rule","test","resolve","Password","type","htmlType","Register","registerRequest","getAvatar","avatarList","registerSubmit","length","withRouter","addEventListener","e","preventDefault","document","title","to","ChatStore","Boolean","location","hostname","match","ReactDOM","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","recordsListRef","createRef","ChatStoreProvider"],"mappings":"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","file":"static/js/main.6194e8d7.chunk.js","sourcesContent":["const siteName: string = 'WeChatRoom';\nconst footerText: string = 'Ant Design Admin 版权所有 © 2020 由 andyguo 支持';\n// const apiIp: string = 'http://139.186.70.223:4000';\nconst apiIp: string = 'http://localhost:4000';\nconst sideWidth: number = 400;\n\nexport {siteName, footerText, apiIp, sideWidth};","import React from 'react';\nimport {useLocalStore} from 'mobx-react-lite';\nimport {getToken, removeToken} from \"@/App/utils/operatorLocalStorage\";\nimport io from 'socket.io-client';\nimport {apiIp} from \"@/common/constant\";\n\n\ninterface userInfo {\n  userId: string,\n  nickname: string,\n  avatar: string\n}\n\ninterface userState {\n  token: string,\n  userInfo: userInfo,\n  allUserList: any[],\n}\n\nlet state: userState = {\n  token: getToken(),\n  userInfo: {\n    userId: '',\n    nickname: '',\n    avatar: ''\n  },\n  allUserList: [],\n};\n\ninterface userStore {\n  user: userState,\n  socket: any,\n\n  logout(): void\n}\n\nfunction createStore(): userStore {\n  return {\n    user: state,\n    socket: io(apiIp),\n    logout(): void {\n      removeToken();\n      this.user.token = '';\n    }\n  };\n}\n\nconst storeContext = React.createContext<userStore>({} as any);\n\n\nexport const StoreProvider = ({children}: { children: any }) => {\n  const store = useLocalStore(createStore);\n  return <storeContext.Provider value={store}> {children}</storeContext.Provider>;\n};\n\nexport const useGlobalStore = (): userStore => {\n  const store: any = React.useContext(storeContext);\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider');\n  }\n  return store;\n};\n\n\n","// 保存在 localStorage 中的 token 字段名\nconst TokenKey: string = 'authorization';\n// 保存在 localStorage 中的 active 字段名\nconst ActiveKey: string = 'chatUserActive';\n\n/**\n * 获取 token\n */\nexport function getToken(): string {\n  return localStorage.getItem(TokenKey) as string;\n}\n\n/**\n * 设置 token\n * @param token:string\n */\nexport function setToken(token: string): void {\n  return localStorage.setItem(TokenKey, token);\n}\n\n/**\n * 移除 token\n */\nexport function removeToken(): void {\n  return localStorage.removeItem(TokenKey);\n}\n\n/**\n * 设置当前聊天用户的 id\n * @param active\n */\nexport function setChatUserActive(active: string): void {\n  return localStorage.setItem(ActiveKey, active);\n}\n\n/**\n * 获取当前聊天用户的 id\n */\nexport function getChatUserActive(): string {\n  return localStorage.getItem(ActiveKey) as string;\n}","import React, {Component} from 'react';\nimport Loadable, { LoadingComponentProps } from 'react-loadable';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\n\n\nclass LoadingComponent extends Component<LoadingComponentProps> {\n  constructor(props: Readonly<Loadable.LoadingComponentProps>) {\n\n    super(props);\n    NProgress.start();\n  }\n\n  componentDidMount() {\n    NProgress.done();\n  }\n\n  render() {\n    return <div />;\n  }\n}\n\n// TODO 组件类型写什么\nexport default (loader: any, loading = LoadingComponent) => {\n  return Loadable({\n    loader,\n    loading\n  });\n}\n","import loadable from \"@/App/utils/loadable\";\n\nconst ChatContent = loadable(() => import('@/App/pages/ChatContent'));\n\ninterface Route {\n  path: string,\n  exact: boolean,\n  auth: boolean,\n  component: any\n}\n\nconst routes: Array<Route> = [\n  {path: '/', exact: true, auth: true, component: ChatContent},\n];\n\nexport default routes;\n","import React from 'react';\nimport './index.less';\nimport {useHistory} from 'react-router';\nimport {useGlobalStore} from \"@/App/store/GlobalStore\";\nimport {Observer} from 'mobx-react-lite';\nimport {message} from \"antd\";\n\n/**\n * 公共头部\n *\n */\n\nfunction WeChatHeader() {\n  const globalStore = useGlobalStore();\n  const router = useHistory();\n\n  return (\n    <Observer>\n      {() =>\n        <div className=\"chat-header-wrapper\">\n          <div className=\"user-info-show\">\n            <div className=\"user-info\">\n              <img className='user-avatar' src={globalStore.user.userInfo.avatar} alt=\"\" />\n              <span className=\"nickname\">{globalStore.user.userInfo.nickname}</span>\n            </div>\n            <div className=\"user-operator\">\n              <ul className=\"operator-list\">\n                <li className=\"operator-item\" onClick={async () => {\n                  globalStore.logout();\n                  router.push(\"/\");\n                  message.success('退出成功');\n                }\n                }>退出登录\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      }\n    </Observer>\n\n  );\n}\n\nexport default WeChatHeader;","import React from 'react';\nimport './index.less';\n\nfunction MyBadge(props) {\n  return (\n    <div className=\"my-badge\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default MyBadge;\n","import axios from 'axios';\nimport {message} from 'antd';\nimport {getToken} from \"@/App/utils/operatorLocalStorage\";\nimport {useCallback, useState} from 'react';\nimport {useGlobalStore} from \"@/App/store/GlobalStore\";\nimport {useHistory} from 'react-router-dom';\n\nconst instance = axios.create({    //创建axios实例，在这里可以设置请求的默认配置\n  timeout: 3000,\n  // baseURL: process.env.NODE_ENV === 'production' ? '' : '/api',   //根据自己配置的反向代理去设置不同环境的baeUrl\n});\n// 文档中的统一设置post请求头。\ninstance.defaults.headers.post['Content-Type'] = 'application/json';\n// delete 请求头\n// instance.defaults.headers.delete['Content-Type'] = 'application/x-www-form-urlencoded';\n\nlet httpCode: { [propName: number]: string } = {        // 这里我简单列出一些常见的http状态码信息，可以自己去调整配置\n  400: '请求参数错误',\n  401: '权限不足, 请重新登录',\n  403: '服务器拒绝本次访问',\n  404: '请求资源未找到',\n  500: '内部服务器错误',\n  501: '服务器不支持该请求中使用的方法',\n  502: '网关错误',\n  504: '网关超时'\n};\n\nexport const useRequest = (url: string, config: any) => {\n  const [loading, setLoading] = useState(false);\n  const globalStore = useGlobalStore();\n  const router = useHistory();\n  const request = useCallback(async (params?: any, pathParams?: string | number) => {\n    const requestUrl = pathParams ? `${url}/${pathParams}` : url;\n    const authorization = getToken();\n    if (authorization) {\n      /*\n        此处有坑，在此记录\n        request.headers['Authorization']\n        必须通过此种形式设置Authorization,否则后端即使收到字段也会出现问题，返回401\n        - request.headers.Authorization或request.headers.authorization可以设置成功，\n        浏览器查看也没有任何问题，但是在后端会报401并且后端一律只能拿到小写的，\n        也就是res.headers.authorization，后端用大写获取会报undefined\n      */\n      axios.defaults.headers['Authorization'] = authorization;\n    } else {\n      delete axios.defaults.headers['Authorization'];\n    }\n\n    setLoading(true);\n    let response;\n    try {\n      if (config.method === 'get') {\n        response = await axios({\n          url: requestUrl,\n          params,\n          ...config\n        });\n\n      } else {\n        response = await axios({\n          url: requestUrl,\n          data: params,\n          ...config\n        });\n      }\n      return response;\n    } catch (error) {\n      if (error.response) {\n        // 根据请求失败的http状态码去给用户相应的提示\n        let tips = error.response.status in httpCode ? httpCode[error.response.status] : error.response.data.message;\n        message.error(tips);\n        if (error.response.status === 401) {\n          globalStore.logout();\n          router.push('/login');\n        }\n        return Promise.reject(tips);\n      } else {\n        message.error('请求超时，请刷新重试');\n        return Promise.reject('请求超时，请刷新重试');\n      }\n    } finally {\n      setLoading(false);\n    }\n\n  }, [url, config]);\n  return {request, loading};\n};\n","import React from 'react';\nimport './index.less';\nimport {observer} from 'mobx-react-lite';\nimport {useChatStore} from \"@/App/layout/Chat/ChatStore/ChatStore\";\nimport {useGlobalStore} from \"@/App/store/GlobalStore\";\nimport MyBadge from \"@/App/components/MyBadge\";\nimport {useRoomRecords} from \"@/App/httpClientRequest/useApi\";\nimport {usePrivateRecords} from \"@/App/httpClientRequest/useApi\";\n\n/**\n * 用户项\n * 包括姓名，头像，是否在线，未读消息数\n */\n\ninterface Props {\n  /* 当前选中项用户 id */\n  userId: string,\n  /* 当前选中项用户昵称 */\n  nickname: string,\n  /* 当前选中项用户头像 */\n  avatar: string,\n  /* 当前选中项用户是否在线 */\n  isOnline: boolean,\n  /* 未读消息数 */\n  unreadMessage: number,\n  /* 最近的一条消息 */\n  latestMessage: { message: string, time: string },\n  /* 最近一条消息的时间 */\n  latestMessageTime: string,\n}\n\nconst UserItem = observer((props: Props) => {\n  const chatStore = useChatStore();\n  const globalStore = useGlobalStore();\n  const {request: getAllRoomRecords} = useRoomRecords();\n  const {request: getPrivateRecords} = usePrivateRecords();\n\n  const chatTo = async () => {\n    const {userId, nickname, avatar} = props;\n    chatStore.chat.userId = userId;\n    chatStore.chat.nickname = nickname;\n    chatStore.chat.avatar = avatar;\n    if (userId.includes('group')) { // 群聊\n      globalStore.socket.emit('clearGroupUnreadMessage', {'userId': globalStore.user.userInfo.userId});\n      globalStore.user.allUserList[0].unreadMessage = 0;\n      chatStore.chat.currentRecords = (await getAllRoomRecords()).data.data.allRoomRecords;\n    } else { // 私聊\n      globalStore.socket.emit('clearPrivateUnreadMessage', {\n        'userId': globalStore.user.userInfo.userId,\n        'fromId': userId,\n      });\n      for (let item of globalStore.user.allUserList) {\n        if (item.userId === userId) {\n          item.unreadMessage = 0;\n        }\n      }\n      chatStore.chat.currentRecords = (await getPrivateRecords({'fromId': userId})).data.data.privateRecords;\n    }\n    // setChatUserActive(userId);\n  };\n\n  return (\n    <li className={`user-list-item${props.userId === chatStore.chat.userId ? ' active' : ''}`} onClick={chatTo}>\n      <div className={`avatar avatar-${props.isOnline ? 'online' : 'offline'}`}>\n        <img src={props.avatar} alt=\"\" />\n      </div>\n      <div className=\"contacts-content\">\n        <div className=\"contacts-info\">\n          <span className=\"chat-name\">{props.nickname}</span>\n          <div className=\"chat-time\">{props.latestMessage.time}</div>\n        </div>\n        <div className=\"contacts-texts\">\n          <p className=\"text-truncate\">{props.latestMessage.message}</p>\n          {\n            props.unreadMessage !== 0 ? <MyBadge>{props.unreadMessage}</MyBadge> : null\n          }\n        </div>\n      </div>\n    </li>\n  );\n});\n\nexport default UserItem;","import {useRequest} from './http';\n\nimport {apiIp} from \"@/common/constant\";\n\n/*\n* 用户登录\n* @param {Object} params 登录参数\n* @requestMethod POST\n* */\nexport const useLogin = () => useRequest(`${apiIp}/api/login`, {method: 'post'});\n\n/*\n* 用户注册\n* @param {Object} params 注册参数\n* @requestMethod POST\n* */\nexport const useRegister = () => useRequest(`${apiIp}/api/register`, {method: 'post'});\n\n/*\n* 获取用户注册时所需头像\n* @requestMethod POST\n* */\nexport const useGetAvatar = () => useRequest(`${apiIp}/api/getAvatar`, {method: 'get'});\n\n/*\n* 获取个人信息\n* @requestMethod GET\n* */\nexport const useMyInfo = () => useRequest(`${apiIp}/api/getUserInfo`, {method: 'get'});\n\n/*\n* 获取所有用户信息\n* @requestMethod GET\n* */\nexport const useUserInfo = () => useRequest(`${apiIp}/api/getAllUser`, {method: 'get'});\n\n\n/*\n* 获取群聊天记录\n* @requestMethod GET\n* */\nexport const useRoomRecords = () => useRequest(`${apiIp}/api/getRoomRecords`, {method: 'get'});\n\n/*\n* 获取私人聊天记录\n* @requestMethod GET\n* */\nexport const usePrivateRecords = () => useRequest(`${apiIp}/api/getPrivateRecords`, {method: 'get'});","import React, {useEffect} from 'react';\nimport './index.less';\nimport {observer} from 'mobx-react-lite';\nimport UserItem from \"@/App/layout/Chat/SideUserList/components/UserItem\";\n\n/**\n * 左侧菜单\n *\n */\n\ninterface Props {\n  allUserList: any[]\n}\n\nconst SideUserList = observer((props: Props) => {\n\n  useEffect(() => {\n\n  });\n\n  return (\n    <ul className=\"all-user-list hidden-scrollbar\">\n      {\n        props.allUserList.map((item) => {\n          return (\n            <UserItem\n              key={item.userId}\n              {...item}\n            />);\n        })\n      }\n    </ul>\n  );\n});\n\nexport default SideUserList;","/**\n * generateUUID 生成UUID\n * @returns {string} 返回字符串\n */\nfunction generateUUID(){\n  var d = new Date().getTime();\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = (d + Math.random()*16)%16 | 0;\n    d = Math.floor(d/16);\n    return (c=='x' ? r : (r&0x7|0x8)).toString(16);\n  });\n  return uuid;\n}\n\nexport {generateUUID}","import React, {useEffect} from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {Layout} from 'antd';\nimport './index.less';\nimport {sideWidth} from \"@/common/constant\";\nimport {Observer} from 'mobx-react-lite';\nimport routes from '@/App/router';\n\nimport WeChatHeader from \"@/App/layout/Chat/WeChatHeader\";\nimport SideUserList from \"@/App/layout/Chat/SideUserList\";\nimport {useGlobalStore} from \"@/App/store/GlobalStore\";\nimport {useChatStore} from \"@/App/layout/Chat/ChatStore/ChatStore\";\nimport {useMyInfo, useUserInfo} from \"@/App/httpClientRequest/useApi\";\nimport {generateUUID} from \"@/App/utils\";\n\nconst {Sider, Content} = Layout;\n\nfunction ChatMain() {\n  const globalStore = useGlobalStore();\n  const chatStore = useChatStore();\n  // const router = useHistory();\n  const {request: getUserInfo} = useMyInfo();\n  const {request: getAllUser} = useUserInfo();\n\n  useEffect(() => {\n    const socket = globalStore.socket;\n    socket.on(\"allMessage\", (data) => {\n      let chatRoom = globalStore.user.allUserList[0];\n      const {userId, avatar, nickname, message, time} = data;\n      /* 对左侧用户列表进行数据更新 */\n      chatRoom.latestMessage.time = time;\n      chatRoom.latestMessage.message = message;\n      if (userId !== globalStore.user.userInfo.userId) { // 发消息的不是自己\n        chatRoom.latestMessage.message = `${nickname}:${message}`;\n      }\n      /* 当前不在群聊对话框 */\n      if (!chatStore.chat.userId.includes('group')) {\n        chatRoom.unreadMessage++;\n      } else {\n        globalStore.socket.emit('clearGroupUnreadMessage', globalStore.user.userInfo.userId);\n        chatStore.chat.currentRecords.push({\n          _id: generateUUID(),\n          fromId: userId,\n          nickname: nickname,\n          avatar: avatar,\n          message: message,\n          time: time\n        });\n      }\n    });\n    socket.on(\"privateMessage\", (data) => {\n      let chatRoom;\n      const {userId, toId, avatar, nickname, message, time} = data;\n      for (let item of globalStore.user.allUserList) {\n        if (item.userId === userId || item.userId === toId) {\n          chatRoom = item;\n        }\n      }\n      /* 对左侧用户列表进行数据更新 */\n      chatRoom.latestMessage.time = time;\n      chatRoom.latestMessage.message = message;\n      /* 当前不在私聊对话框 */\n      if (chatStore.chat.userId !== userId && chatStore.chat.userId !== toId) {\n        chatRoom.unreadMessage++;\n      } else {\n        globalStore.socket.emit('clearPrivateUnreadMessage', {\n          'userId': globalStore.user.userInfo.userId,\n          'fromId': chatStore.chat.userId === userId ? userId : toId,\n        });\n        chatStore.chat.currentRecords.push({\n          _id: generateUUID(),\n          fromId: userId,\n          nickname: nickname,\n          avatar: avatar,\n          message: message,\n          time: time\n        });\n      }\n    });\n    socket.on(\"addNewUser\", (data) => {\n      globalStore.user.allUserList.push(data);\n    });\n    socket.on(\"userLogin\", (data) => {\n      globalStore.user.allUserList.forEach((value) => {\n        if (value.userId === data.userId) {\n          value.isOnline = true;\n        }\n      })\n    });\n    socket.on(\"userLogout\", (data) => {\n      globalStore.user.allUserList.forEach((value) => {\n        if (value.userId === data.userId) {\n          value.isOnline = false;\n        }\n      })\n    });\n    (async () => {\n      globalStore.user.userInfo = (await getUserInfo()).data.data;\n      socket.emit('login', {'userId': globalStore.user.userInfo.userId});\n      globalStore.user.allUserList = (await getAllUser()).data.data.allUserList;\n      let groupItem = globalStore.user.allUserList[0];\n      if (groupItem.latestMessage.fromId) { // 聊天存在\n        if (groupItem.latestMessage.fromId !== globalStore.user.userInfo.userId) {\n          const latestMessageNickname = groupItem.latestMessage.nickname;\n          groupItem.latestMessage.message = `${latestMessageNickname}:${groupItem.latestMessage.message}`;\n        }\n      }\n    })();\n\n    //监听浏览器关闭事件(绝对好使，需所有代码放到生命周期mounted中)\n    var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串  \n    var isOpera = userAgent.indexOf(\"Opera\") > -1; //判断是否Opera浏览器  \n    var isIE = userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera; //判断是否IE浏览器\n    var isIE11 = userAgent.indexOf(\"rv:11.0\") > -1; //判断是否是IE11浏览器\n    var isEdge = userAgent.indexOf(\"Edge\") > -1 && !isIE; //判断是否IE的Edge浏览器\n    if (!isIE && !isEdge && !isIE11) {//兼容chrome和firefox\n      var _beforeUnload_time = 0, _gap_time = 0;\n      var is_fireFox = navigator.userAgent.indexOf(\"Firefox\") > -1;//是否是火狐浏览器\n      window.onunload = function () {\n        _gap_time = new Date().getTime() - _beforeUnload_time;\n        if (_gap_time <= 5) {\n          //谷歌浏览器关闭\n        } else {\n          //谷歌浏览器刷新\n        }\n        socket.emit('disconnection', {'userId': globalStore.user.userInfo.userId});\n      };\n      window.onbeforeunload = function () {\n        _beforeUnload_time = new Date().getTime();\n        if (is_fireFox) {\n          //火狐浏览器关闭\n        } else {\n          //火狐浏览器刷新\n        }\n        socket.emit('disconnection', {'userId': globalStore.user.userInfo.userId});\n      };\n    }\n    return () => {\n      socket.emit('disconnection', {'userId': globalStore.user.userInfo.userId});\n    }\n  }, []);\n\n  return (\n    <Layout className=\"back-layout-wrapper\">\n      <Sider\n        className='chatSider'\n        width={sideWidth}\n      >\n        <WeChatHeader />\n        <Observer>\n          {() =>\n            <SideUserList\n              allUserList={globalStore.user.allUserList}\n            />\n          }\n        </Observer>\n      </Sider>\n      <Layout\n        style={\n          {\n            marginLeft: sideWidth,\n            backgroundColor: \"#fff\",\n          }\n        }\n      >\n        <Content\n          style={{\n            display: 'flex',\n            height: '100vh',\n          }}\n        >\n          <Observer>\n            {() => <Switch>\n              {routes.map((item: any) => {\n                return (\n                  <Route\n                    key={item.path}\n                    path={item.path}\n                    exact={item.exact}\n                    render={props => {\n                      // document.title = `${item.title}-${siteName}`;\n                      return <item.component {...props} />;\n                    }\n                    } />\n                );\n              })}\n            </Switch>}\n          </Observer>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default ChatMain;\n","import React from 'react';\nimport {Form, Input, Button, message} from 'antd';\nimport {observer} from 'mobx-react-lite';\nimport {useHistory} from 'react-router-dom';\nimport './index.less';\nimport {useLogin} from '@/App/httpClientRequest/useApi';\nimport {setToken} from \"@/App/utils/operatorLocalStorage\";\nimport {useGlobalStore} from \"@/App/store/GlobalStore\";\nimport md5 from 'md5';\n\nconst Login = observer(props => {\n  const globalStore = useGlobalStore();\n  const socket = globalStore.socket;\n  const router = useHistory();\n  const {request: loginRequest, loading} = useLogin();\n\n  // 验证登录表单\n  const pwdValidate = (rule: any, value: string) => {\n    const regular = /^[a-zA-Z0-9]{6,20}$/;\n    if (!value) {\n      return Promise.reject('密码不能为空！');\n    }\n    if (regular.test(value)) {\n      return Promise.resolve();\n    } else {\n      return Promise.reject('密码为 6-20 位数字和字母！');\n    }\n  };\n\n  // 登录请求\n  const loginSubmit = async (values: any) => {\n    values.password = md5(values.password);\n    const res = await loginRequest(values);\n    const resData = res.data;\n    if (resData.code !== '1') {\n      message.error(resData.message);\n    } else {\n      setToken(`Bearer ${resData.token}`);\n      globalStore.user.token = resData.token;\n      router.push('/');\n      message.success('登录成功');\n    }\n  };\n\n  return (\n    <div className=\"login-wrapper\">\n      <div className=\"login-box\">\n        <h1 className='welcome'>欢迎登录</h1>\n        <Form\n          onFinish={loginSubmit}\n        >\n          <Form.Item\n            name='username'\n            rules={[\n              {required: true, message: '账号不能为空！'},\n            ]\n            }\n          >\n            <Input\n              autoComplete='off'\n              placeholder='请输入用户名'\n            />\n          </Form.Item>\n          <Form.Item\n            name='password'\n            rules={[\n              {validator: pwdValidate}\n            ]}\n          >\n            <Input.Password\n              placeholder='请输入 6-20 位数字和字母'\n              autoComplete='off'\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button\n              loading={loading}\n              className='login-btn'\n              type='primary'\n              htmlType='submit'>登录</Button>\n          </Form.Item>\n        </Form>\n        <div className=\"to-register\">\n          <span onClick={() => {\n            router.push('/register')\n          }}>去注册</span>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Login;\n// function W(CClass) {\n//   return <Consumer>{(rouer)=><CClass {...router}/>}</Consumer>\n// }","import React, {useEffect} from 'react';\nimport {Form, Input, Button, message} from 'antd';\nimport {observer} from 'mobx-react-lite';\nimport {useLocalStore} from \"mobx-react-lite\";\nimport {useHistory} from 'react-router-dom';\nimport './index.less';\nimport {useRegister, useGetAvatar} from '@/App/httpClientRequest/useApi';\nimport md5 from 'md5';\nimport {useGlobalStore} from \"@/App/store/GlobalStore\";\n\ninterface Store {\n  avatarList: string[],\n}\n\nconst Register = observer(props => {\n  const globalStore = useGlobalStore();\n  const socket = globalStore.socket;\n  const router = useHistory();\n  const {request: registerRequest, loading} = useRegister();\n  const {request: getAvatar} = useGetAvatar();\n\n  const store: Store = useLocalStore(() => ({\n    avatarList: [],\n  }));\n\n  useEffect(() => {\n    (async function () {\n      store.avatarList = (await getAvatar()).data.data.avatarList;\n    })();\n  }, []);\n\n  // 验证登录表单\n  const pwdValidate = (rule: any, value: string) => {\n    const regular = /^[a-zA-Z0-9]{6,20}$/;\n    if (!value) {\n      return Promise.reject('密码不能为空！');\n    }\n    if (regular.test(value)) {\n      return Promise.resolve();\n    } else {\n      return Promise.reject('密码为 6-20 位数字和字母！');\n    }\n  };\n\n  // 注册请求\n  const registerSubmit = async (values: any) => {\n    let random = Math.floor(Math.random() * store.avatarList.length);\n    values.password = md5(values.password);\n    values.avatar = store.avatarList[random];\n\n    const res = await registerRequest(values);\n    const resData = res.data;\n    if (resData.code !== '1') {\n      message.error(resData.message);\n    } else {\n      router.push('/login');\n      message.success('注册成功');\n      socket.emit('register');\n    }\n  };\n\n  return (\n    <div className=\"login-wrapper\">\n      <div className=\"login-box\">\n        <h1 className='welcome'>欢迎注册</h1>\n        <Form\n          onFinish={registerSubmit}\n        >\n          <Form.Item\n            name='username'\n            rules={[\n              {required: true, message: '账号不能为空！'},\n            ]\n            }\n          >\n            <Input\n              autoComplete='off'\n              placeholder='请输入用户名'\n            />\n          </Form.Item>\n          <Form.Item\n            name='nickname'\n            rules={[\n              {required: true, message: '昵称不能为空！'},\n            ]\n            }\n          >\n            <Input\n              autoComplete='off'\n              placeholder='请输入昵称'\n            />\n          </Form.Item>\n          <Form.Item\n            name='password'\n            rules={[\n              {validator: pwdValidate}\n            ]}\n          >\n            <Input.Password\n              placeholder='请输入 6-20 位数字和字母'\n              autoComplete='off'\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button\n              loading={loading}\n              className='login-btn'\n              type='primary'\n              htmlType='submit'>注册</Button>\n          </Form.Item>\n        </Form>\n        <div className=\"to-register\">\n          <span onClick={() => {\n            router.push('/login')\n          }}>去登陆</span>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Register;\n// function W(CClass) {\n//   return <Consumer>{(rouer)=><CClass {...router}/>}</Consumer>\n// }","import React, {useEffect} from 'react';\nimport {Switch, Route, withRouter, Redirect} from 'react-router-dom';\nimport './index.less';\nimport {siteName} from \"@/common/constant\";\n\nimport ChatMain from \"@/App/layout/Chat/ChatMain\";\nimport Login from \"@/App/layout/Login\";\nimport Register from \"@/App/layout/Register\";\nimport {getToken} from \"@/App/utils/operatorLocalStorage\";\nimport {ChatStoreProvider} from \"@/App/layout/Chat/ChatStore/ChatStore\";\n\nfunction App(props: any) {\n  useEffect(() => {\n    /* 捕获全局 reject 并取消报错*/\n    window.addEventListener('unhandledrejection', (e) => {\n      e.preventDefault();\n    });\n  }, []);\n  return (\n    <Switch>\n      <Route path='/login' render={() => {\n        document.title = `登录-${siteName}`;\n        return getToken() ? <Redirect to='/' /> : <Login />;\n      }} />\n      <Route path='/register' render={() => {\n        document.title = `注册-${siteName}`;\n        return <Register />;\n      }} />\n      <Route path='/' render={() => {\n        document.title = `聊天-${siteName}`;\n        return getToken() ? <ChatStoreProvider><ChatMain /></ChatStoreProvider> : <Redirect to='/login' />;\n      }} />\n    </Switch>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Index is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport {StoreProvider} from \"@/App/store/GlobalStore\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {useLocalStore} from 'mobx-react-lite';\n\ninterface chatState {\n  /* 当前选中用户 id */\n  userId: string,\n  /* 当前选中用户昵称 */\n  nickname: string,\n  /* 当前选中用户头像 */\n  avatar: string\n  /* 当前聊天内容 */\n  currentRecords: any[],\n  /* 聊天内容列表ref */\n  recordsListRef: any,\n}\n\nlet state: chatState = {\n  userId: '',\n  nickname: '',\n  avatar: '',\n  currentRecords: [],\n  recordsListRef: React.createRef(),\n};\n\ninterface chatStore {\n  chat: chatState\n}\n\nfunction createStore() {\n  return {\n    chat: state,\n  };\n}\n\nconst storeContext = React.createContext<chatStore>({} as any);\n\n\nexport const ChatStoreProvider = ({children}: { children: any }) => {\n  const store = useLocalStore(createStore);\n  return <storeContext.Provider value={store}> {children}</storeContext.Provider>;\n};\n\nexport const useChatStore = (): chatStore => {\n  const store: chatStore = React.useContext(storeContext);\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider');\n  }\n  return store;\n};\n\n\n"],"sourceRoot":""}